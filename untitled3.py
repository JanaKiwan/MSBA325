# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k1rFaHa83rgB39wAE_5f3_ePFs4NLFwO
"""

#pip install plotly
#pip install plotly pandas

#pip install streamlit

import streamlit as st

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns

# Set Streamlit theme
st.set_page_config(
    page_title="Hospital Encounters",

    layout="wide",

)
# Set color palette for visualizations
sns.set_palette("pastel")

# Define the layout
st.title("Hospital Encounters Dashboard")

# Add CSS to set the background image for the title
st.markdown(
    """
    <style>
    h1 {
        background-repeat: no-repeat;
        background-color: lightblue;
        background-position: center;
        background-size: cover;
        color: black;
        padding: 1rem;
        text-align: center;
        font-size: 3rem;
    }

    .left-column {
        flex: 1;
        padding-right: 1rem;
        padding-top: 5rem;
    }
    .right-column {
        flex: 1;
        padding-left: 1rem;
    }
	.analytics-text {
			font-size: 1rem;
			text-align: left;
			margin-top: 1rem;
		}

    </style>
    """,
    unsafe_allow_html=True
)

# Create a Streamlit app title
st.title('Diabestes Hospital Visualization')

# Load the dataset
data = pd.read_csv('Diabestes_Hospital_Encounters (1).csv')

# Visualization 1: Bar Chart with Filters
st.header("Visualization 1: Bar Chart with Filters")

# Filter options
selected_gender = st.selectbox("Select Gender:", ['All'] + data['gender'].unique().tolist(), index=0)
selected_age_group = st.selectbox("Select Age Group:", ['All'] + data['age_group'].unique().tolist(), index=0)

# Apply filters
filtered_data = data.copy()
if selected_gender != 'All':
    filtered_data = filtered_data[filtered_data['gender'] == selected_gender]
if selected_age_group != 'All':
    filtered_data = filtered_data[filtered_data['age_group'] == selected_age_group]

# Create bar chart
fig = px.bar(filtered_data, x='race', title='Patient Count by Race', labels={'race': 'Race', 'count': 'Patient Count'})
st.plotly_chart(fig, use_container_width=True)

# Description for Bar Graph
st.markdown("The bar graph below displays the distribution of patients based on their racial backgrounds.")
st.markdown("Each bar represents a specific race, and the height of the bar corresponds to the count of patients belonging to that particular race.")
st.markdown("Use the filters on the sidebar to explore variations based on gender and age group.")

data['HospitalStayLength'] = pd.to_numeric(data['HospitalStayLength'], errors='coerce')  # Convert to numeric

# Visualization 2: Pie Chart with Slider
st.header("Visualization 2: Pie Chart with Slider")

# Slider for the number of medications
num_meds_slider = st.slider("Select Number of Medications:", min_value=1, max_value=data['num_medications'].max(), value=5)

# Filter based on the number of medications
medication_data = data[data['num_medications'] == num_meds_slider]

# Create pie chart
fig = px.pie(medication_data, names='Diabetes_Med', title=f'Distribution of Diabetes Medication (Num Meds = {num_meds_slider})')
st.plotly_chart(fig, use_container_width=True)

st.markdown("The pie chart illustrates the distribution of patients based on whether they are taking diabetes medication or not.")
st.markdown("Each segment of the pie represents a distinct category related to diabetes medication.")
st.markdown("Use the slider on the sidebar to choose the number of medications and explore how the distribution changes accordingly.")